// Generated by Apple Swift version 4.1.2 effective-3.3.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="StatusAlert",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class StatusAlertAppearance;
@class StatusAlertSizesAndDistances;
enum StatusAlertMultiplePresentationsBehavior : NSInteger;
@class UIImage;
enum StatusAlertVerticalPosition : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC11StatusAlert11StatusAlert")
@interface StatusAlert : UIView
/// note:
/// Do not change to save system look
/// note:
/// Changes while showing will have no effect
@property (nonatomic, strong) StatusAlertAppearance * _Nonnull appearance;
/// note:
/// Do not change to save system look
/// note:
/// Changes while showing will have no effect
@property (nonatomic, strong) StatusAlertSizesAndDistances * _Nonnull sizesAndDistances;
/// Announced to VoiceOver when the alert gets presented
@property (nonatomic, copy) NSString * _Nullable accessibilityAnnouncement;
/// How long StatusAlert should be on screen.
/// note:
/// This time should include fade animation duration (which is <code>UINavigationControllerHideShowBarDuration</code>)
/// note:
/// Changes while showing will have no effect
@property (nonatomic) NSTimeInterval alertShowingDuration;
/// Multiple presentation requests behavior
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum StatusAlertMultiplePresentationsBehavior multiplePresentationsBehavior;)
+ (enum StatusAlertMultiplePresentationsBehavior)multiplePresentationsBehavior SWIFT_WARN_UNUSED_RESULT;
+ (void)setMultiplePresentationsBehavior:(enum StatusAlertMultiplePresentationsBehavior)value;
/// If multiple alerts can be on screen at once
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldShowMultipleAlertsSimultaneously;)
+ (BOOL)shouldShowMultipleAlertsSimultaneously SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldShowMultipleAlertsSimultaneously:(BOOL)newValue;
/// Instantiates <code>StatusAlert</code>
/// \param image @1x should be 90*90 by default, optional
///
/// \param title displayed beyond image
///
/// \param message displayed beyond title or
///
/// \param canBePickedOrDismissed determines wether StatusAlert can be picked or dismissed by tap
///
///
/// returns:
/// <code>StatusAlert</code> instance
+ (StatusAlert * _Nonnull)statusAlertWithImage:(UIImage * _Nullable)image title:(NSString * _Nullable)title message:(NSString * _Nullable)message canBePickedOrDismissed:(BOOL)canBePickedOrDismissed SWIFT_WARN_UNUSED_RESULT;
/// Shows <code>StatusAlert</code> in the center of the <code>keyWindow</code>
/// note:
/// must be called from the main thread only
- (void)showInKeyWindow;
/// Shows <code>StatusAlert</code> in the center of <code>presenter</code>
/// note:
/// must be called from the main thread only
/// \param presenter view present <code>StatusAlert</code> in
///
- (void)showInView:(UIView * _Nonnull)presenter;
/// Shows <code>StatusAlert</code> in <code>keyWindow</code>
/// note:
/// must be called from the main thread only
/// \param verticalPosition <code>StatusAlert</code> position in <code>keyWindow</code>
///
- (void)showWithVerticalPosition:(enum StatusAlertVerticalPosition)verticalPosition;
/// Shows <code>StatusAlert</code> in the center of <code>keyWindow</code> with <code>offset</code>
/// note:
/// must be called from the main thread only
/// \param offset offset from center of <code>keyWindow</code>
///
- (void)showWithOffset:(CGFloat)offset;
/// Shows <code>StatusAlert</code> in <code>presenter</code>
/// note:
/// must be called from the main thread only
/// \param presenter view present <code>StatusAlert</code> in
///
/// \param verticalPosition <code>StatusAlert</code> position in <code>presenter</code>
///
- (void)showInView:(UIView * _Nonnull)presenter withVerticalPosition:(enum StatusAlertVerticalPosition)verticalPosition;
/// Shows <code>StatusAlert</code> in the center of <code>presenter</code>
/// note:
/// must be called from the main thread only
/// \param presenter view present <code>StatusAlert</code> in
///
/// \param offset offset from center in <code>presenter</code>
///
- (void)showInView:(UIView * _Nonnull)presenter withOffset:(CGFloat)offset;
/// Shows <code>StatusAlert</code> in <code>keyWindow</code>
/// note:
/// must be called from the main thread only
/// \param verticalPosition <code>StatusAlert</code> position in <code>keyWindow</code>
///
/// \param offset offset for <code>verticalPosition</code> in <code>keyWindow</code>
///
- (void)showWithVerticalPosition:(enum StatusAlertVerticalPosition)verticalPosition offset:(CGFloat)offset;
/// Shows <code>StatusAlert</code> in <code>presenter</code>
/// note:
/// must be called from the main thread only
/// \param presenter view present <code>StatusAlert</code> in
///
/// \param verticalPosition <code>StatusAlert</code> position in <code>presenter</code>
///
/// \param offset offset for <code>verticalPosition</code> in <code>presenter</code>. To use default offset see the same method but without offset parameter.
///
- (void)showInView:(UIView * _Nonnull)presenter withVerticalPosition:(enum StatusAlertVerticalPosition)verticalPosition offset:(CGFloat)offset;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface StatusAlert (SWIFT_EXTENSION(StatusAlert))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, StatusAlertMultiplePresentationsBehavior, "MultiplePresentationsBehavior") {
/// Not more than one StatusAlert will be shown at once
  StatusAlertMultiplePresentationsBehaviorIgnoreIfAlreadyPresenting = 0,
/// Currently presented StatusAlerts will be dismissed before presenting another one
  StatusAlertMultiplePresentationsBehaviorDismissCurrentlyPresented = 1,
/// All requested StatusAlerts will be shown
  StatusAlertMultiplePresentationsBehaviorShowMultiple = 2,
};

@class UIFont;
@class UIColor;

SWIFT_CLASS_NAMED("Appearance")
@interface StatusAlertAppearance : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) StatusAlertAppearance * _Nonnull common;)
+ (StatusAlertAppearance * _Nonnull)common SWIFT_WARN_UNUSED_RESULT;
/// note:
/// Do not change to save system look
@property (nonatomic, strong) UIFont * _Nonnull titleFont;
/// note:
/// Do not change to save system look
@property (nonatomic, strong) UIFont * _Nonnull messageFont;
/// note:
/// Do not change to save system look
@property (nonatomic, strong) UIColor * _Nonnull tintColor;
/// Used if device does not support blur or if <code>Reduce Transparency</code> toggle
/// in <code>General->Accessibility->Increase Contrast</code> is on
/// note:
/// Do not change to save system look
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
+ (StatusAlertAppearance * _Nonnull)copyCommon SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, StatusAlertVerticalPosition, "VerticalPosition") {
/// Position in the center of the view
  StatusAlertVerticalPositionCenter = 0,
/// Position on the top of the view
  StatusAlertVerticalPositionTop = 1,
/// Position at the bottom of the view
  StatusAlertVerticalPositionBottom = 2,
};


SWIFT_CLASS_NAMED("SizesAndDistances")
@interface StatusAlertSizesAndDistances : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) StatusAlertSizesAndDistances * _Nonnull common;)
+ (StatusAlertSizesAndDistances * _Nonnull)common SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGFloat defaultInitialScale;
@property (nonatomic) CGFloat defaultCornerRadius;
@property (nonatomic) CGFloat defaultTopOffset;
@property (nonatomic) CGFloat defaultBottomOffset;
@property (nonatomic) CGFloat defaultImageWidth;
@property (nonatomic) CGFloat defaultAlertWidth;
@property (nonatomic) CGFloat minimumAlertHeight;
@property (nonatomic) CGFloat minimumStackViewTopSpace;
@property (nonatomic) CGFloat minimumStackViewBottomSpace;
@property (nonatomic) CGFloat stackViewSideSpace;
@property (nonatomic) CGFloat defaultImageBottomSpace;
@property (nonatomic) CGFloat defaultTitleBottomSpace;
@property (nonatomic) CGFloat defaultImageToMessageSpace;
+ (StatusAlertSizesAndDistances * _Nonnull)copyCommon SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
